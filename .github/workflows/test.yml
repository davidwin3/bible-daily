name: Test Suite

on:
  # 자동 트리거
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  
  # 스케줄 실행 (매일 오전 9시)
  schedule:
    - cron: '0 9 * * *'
  
  # 수동 실행 트리거
  workflow_dispatch:
    inputs:
      test_type:
        description: '실행할 테스트 타입을 선택하세요'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance
          - visual
      environment:
        description: '테스트할 환경을 선택하세요'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      parallel_jobs:
        description: '병렬 실행할 작업 수'
        required: false
        default: '4'
        type: string

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # 테스트 설정 및 변경사항 감지
  setup:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.changes.outputs.frontend }}
      backend_changed: ${{ steps.changes.outputs.backend }}
      test_type: ${{ steps.test-type.outputs.type }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - '.github/workflows/test.yml'
            backend:
              - 'backend/**'
              - '.github/workflows/test.yml'

      - name: Determine test type
        id: test-type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.test_type }}" >> $GITHUB_OUTPUT
          else
            echo "type=all" >> $GITHUB_OUTPUT
          fi

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

  # Frontend 단위 테스트
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    if: |
      (needs.setup.outputs.frontend_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') &&
      (needs.setup.outputs.test_type == 'all' || needs.setup.outputs.test_type == 'unit')
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm --filter frontend test:unit --shard=${{ matrix.shard }}/4
        env:
          CI: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-${{ matrix.shard }}
          path: frontend/coverage/

  # Backend 단위 테스트
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    if: |
      (needs.setup.outputs.backend_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') &&
      (needs.setup.outputs.test_type == 'all' || needs.setup.outputs.test_type == 'unit')
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: bible_daily_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create test environment file
        run: |
          cd backend
          cat > .env.test << EOF
          NODE_ENV=test
          DB_HOST=localhost
          DB_PORT=3306
          DB_USERNAME=root
          DB_PASSWORD=test_password
          DB_DATABASE=bible_daily_test
          REDIS_HOST=localhost
          REDIS_PORT=6379
          JWT_SECRET=test_jwt_secret
          JWT_REFRESH_SECRET=test_refresh_secret
          EOF

      - name: Run database migrations
        run: pnpm --filter backend migration:run
        env:
          NODE_ENV: test

      - name: Run unit tests
        run: pnpm --filter backend test --coverage
        env:
          NODE_ENV: test
          CI: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage/

  # 통합 테스트
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    if: |
      (needs.setup.outputs.backend_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') &&
      (needs.setup.outputs.test_type == 'all' || needs.setup.outputs.test_type == 'integration')
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: bible_daily_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create test environment file
        run: |
          cd backend
          cat > .env.test << EOF
          NODE_ENV=test
          DB_HOST=localhost
          DB_PORT=3306
          DB_USERNAME=root
          DB_PASSWORD=test_password
          DB_DATABASE=bible_daily_test
          REDIS_HOST=localhost
          REDIS_PORT=6379
          JWT_SECRET=test_jwt_secret
          JWT_REFRESH_SECRET=test_refresh_secret
          EOF

      - name: Run database migrations
        run: pnpm --filter backend migration:run
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: pnpm --filter backend test:e2e
        env:
          NODE_ENV: test
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: backend/test-results/

  # E2E 테스트
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: setup
    if: |
      (needs.setup.outputs.frontend_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') &&
      (needs.setup.outputs.test_type == 'all' || needs.setup.outputs.test_type == 'e2e')
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1, 2]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm --filter frontend playwright install ${{ matrix.browser }}

      - name: Run E2E tests
        run: pnpm --filter frontend test:e2e --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/2
        env:
          BASE_URL: ${{ needs.setup.outputs.environment == 'production' && 'https://bible-daily.com' || needs.setup.outputs.environment == 'staging' && 'https://staging.bible-daily.com' || 'https://dev.bible-daily.com' }}
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}-${{ matrix.shard }}
          path: |
            frontend/test-results/
            frontend/playwright-report/

  # 성능 테스트
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: setup
    if: |
      (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') &&
      (needs.setup.outputs.test_type == 'all' || needs.setup.outputs.test_type == 'performance')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
          LHCI_BUILD_CONTEXT__COMMIT_MESSAGE: ${{ github.event.head_commit.message }}

      - name: Run K6 load tests
        uses: grafana/k6-action@v0.3.1
        with:
          filename: frontend/tests/performance/load-test.js
        env:
          BASE_URL: ${{ needs.setup.outputs.environment == 'production' && 'https://api.bible-daily.com' || needs.setup.outputs.environment == 'staging' && 'https://api-staging.bible-daily.com' || 'https://api-dev.bible-daily.com' }}

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            .lighthouseci/
            k6-results.json

  # 시각적 회귀 테스트
  visual-regression-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: setup
    if: |
      (needs.setup.outputs.frontend_changed == 'true' || github.event_name == 'workflow_dispatch') &&
      (needs.setup.outputs.test_type == 'all' || needs.setup.outputs.test_type == 'visual')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Storybook
        run: pnpm --filter frontend build-storybook

      - name: Run Chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          workingDir: frontend
          buildScriptName: build-storybook
          exitZeroOnChanges: true
        continue-on-error: true

  # 접근성 테스트
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: setup
    if: |
      (needs.setup.outputs.frontend_changed == 'true' || github.event_name == 'workflow_dispatch') &&
      (needs.setup.outputs.test_type == 'all' || needs.setup.outputs.test_type == 'e2e')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run accessibility tests
        run: pnpm --filter frontend test:a11y
        env:
          BASE_URL: ${{ needs.setup.outputs.environment == 'production' && 'https://bible-daily.com' || needs.setup.outputs.environment == 'staging' && 'https://staging.bible-daily.com' || 'https://dev.bible-daily.com' }}
          CI: true

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-results
          path: frontend/a11y-results/

  # 테스트 결과 통합
  test-results:
    name: Aggregate Test Results
    runs-on: ubuntu-latest
    needs: [setup, frontend-unit-tests, backend-unit-tests, integration-tests, e2e-tests, performance-tests, visual-regression-tests, accessibility-tests]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: Merge coverage reports
        run: |
          # Frontend coverage 병합
          if [ -d "test-results/frontend-coverage-1" ]; then
            mkdir -p merged-coverage/frontend
            # Coverage 병합 로직 (nyc 또는 c8 사용)
            echo "Frontend coverage reports found"
          fi
          
          # Backend coverage 처리
          if [ -d "test-results/backend-coverage" ]; then
            mkdir -p merged-coverage/backend
            cp -r test-results/backend-coverage/* merged-coverage/backend/
            echo "Backend coverage reports found"
          fi

      - name: Upload merged coverage
        uses: codecov/codecov-action@v4
        with:
          directory: merged-coverage/
          flags: unittests
          name: bible-daily-coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Generate test report
        run: |
          cat > test-summary.md << EOF
          # 테스트 실행 결과
          
          ## 실행 환경
          - **Environment**: ${{ needs.setup.outputs.environment }}
          - **Test Type**: ${{ needs.setup.outputs.test_type }}
          - **Trigger**: ${{ github.event_name }}
          - **Branch**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}
          
          ## 테스트 결과
          - **Frontend Unit Tests**: ${{ needs.frontend-unit-tests.result }}
          - **Backend Unit Tests**: ${{ needs.backend-unit-tests.result }}
          - **Integration Tests**: ${{ needs.integration-tests.result }}
          - **E2E Tests**: ${{ needs.e2e-tests.result }}
          - **Performance Tests**: ${{ needs.performance-tests.result }}
          - **Visual Regression**: ${{ needs.visual-regression-tests.result }}
          - **Accessibility Tests**: ${{ needs.accessibility-tests.result }}
          EOF

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md

  # 알림
  notify:
    name: Send Test Notifications
    runs-on: ubuntu-latest
    needs: [setup, frontend-unit-tests, backend-unit-tests, integration-tests, e2e-tests, performance-tests, visual-regression-tests, accessibility-tests]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Determine overall status
        id: status
        run: |
          # 필수 테스트들의 결과 확인
          CRITICAL_TESTS=("${{ needs.frontend-unit-tests.result }}" "${{ needs.backend-unit-tests.result }}" "${{ needs.integration-tests.result }}")
          
          FAILED=false
          for result in "${CRITICAL_TESTS[@]}"; do
            if [ "$result" = "failure" ]; then
              FAILED=true
              break
            fi
          done
          
          if [ "$FAILED" = true ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ steps.status.outputs.emoji }} 테스트 실행 완료 - ${{ steps.status.outputs.status }}",
              "attachments": [
                {
                  "color": "${{ steps.status.outputs.color }}",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "${{ needs.setup.outputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Test Type",
                      "value": "${{ needs.setup.outputs.test_type }}",
                      "short": true
                    },
                    {
                      "title": "Frontend Unit",
                      "value": "${{ needs.frontend-unit-tests.result }}",
                      "short": true
                    },
                    {
                      "title": "Backend Unit",
                      "value": "${{ needs.backend-unit-tests.result }}",
                      "short": true
                    },
                    {
                      "title": "Integration",
                      "value": "${{ needs.integration-tests.result }}",
                      "short": true
                    },
                    {
                      "title": "E2E Tests",
                      "value": "${{ needs.e2e-tests.result }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}