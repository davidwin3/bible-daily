name: Backend CI/CD

on:
  # 자동 트리거
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci-cd.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci-cd.yml"

  # 수동 실행 트리거
  workflow_dispatch:
    inputs:
      environment:
        description: "배포할 환경을 선택하세요"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - staging
          - production
      skip_tests:
        description: "테스트를 건너뛸지 선택하세요"
        required: false
        default: false
        type: boolean
      skip_security_scan:
        description: "보안 스캔을 건너뛸지 선택하세요"
        required: false
        default: false
        type: boolean
      deploy_only:
        description: "배포만 실행할지 선택하세요 (빌드 건너뛰기)"
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "10"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  # 환경 설정 및 변경사항 감지
  setup:
    name: Setup and Detect Changes
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.changes.outputs.backend }}
      environment: ${{ steps.env.outputs.environment }}
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.meta.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - '.github/workflows/backend-ci-cd.yml'

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=development" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ steps.env.outputs.environment }}

  # 테스트 및 린트
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    needs: setup
    if: |
      (needs.setup.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch') &&
      (github.event.inputs.skip_tests != 'true' && github.event.inputs.deploy_only != 'true')
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: bible_daily_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm --filter backend lint

      - name: Run TypeScript check
        run: pnpm --filter backend build

      - name: Create test environment file
        run: |
          cd backend
          cat > .env.test << EOF
          NODE_ENV=test
          DB_HOST=localhost
          DB_PORT=3306
          DB_USERNAME=root
          DB_PASSWORD=test_password
          DB_DATABASE=bible_daily_test
          REDIS_HOST=localhost
          REDIS_PORT=6379
          JWT_SECRET=test_jwt_secret
          JWT_REFRESH_SECRET=test_refresh_secret
          EOF

      - name: Run database migrations
        run: pnpm --filter backend migration:run
        env:
          NODE_ENV: test

      - name: Run unit tests
        run: pnpm --filter backend test
        env:
          NODE_ENV: test
          CI: true

      - name: Run integration tests
        run: pnpm --filter backend test:e2e
        env:
          NODE_ENV: test
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/coverage/
            backend/test-results/

  # 보안 스캔
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    if: |
      (needs.setup.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch') &&
      github.event.inputs.skip_security_scan != 'true' &&
      github.event.inputs.deploy_only != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: pnpm --filter backend audit --audit-level moderate
        continue-on-error: true

      - name: Run Snyk security scan
        if: env.SNYK_TOKEN != ''
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=backend/package.json
        continue-on-error: true

      - name: Run Semgrep SAST scan
        if: env.SEMGREP_APP_TOKEN != ''
        uses: semgrep/semgrep-action@v1
        with:
          config: auto
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Docker 이미지 빌드
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [setup, test, security-scan]
    if: |
      always() && 
      (needs.setup.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch') &&
      (needs.test.result == 'success' || needs.test.result == 'skipped' || github.event.inputs.skip_tests == 'true') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped' || github.event.inputs.skip_security_scan == 'true')
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ needs.setup.outputs.image_tag }}
          labels: |
            org.opencontainers.image.title=Bible Daily Backend
            org.opencontainers.image.description=Backend API for Bible Daily application
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image.outputs.image }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Railway 배포
  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: |
      always() && 
      (needs.setup.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch') &&
      (needs.build.result == 'success' || github.event.inputs.deploy_only == 'true') &&
      github.event_name != 'pull_request' &&
      needs.setup.outputs.environment != 'production'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        run: |
          railway login --token ${{ secrets.RAILWAY_TOKEN }}

          # 환경별 프로젝트 ID 설정
          if [ "${{ needs.setup.outputs.environment }}" = "development" ]; then
            PROJECT_ID="${{ secrets.RAILWAY_PROJECT_ID_DEV }}"
          elif [ "${{ needs.setup.outputs.environment }}" = "staging" ]; then
            PROJECT_ID="${{ secrets.RAILWAY_PROJECT_ID_STAGING }}"
          fi

          # 환경 변수 설정
          railway environment use ${{ needs.setup.outputs.environment }} --project $PROJECT_ID

          # 배포
          railway up --project $PROJECT_ID --service backend
        working-directory: backend

      - name: Wait for deployment
        run: sleep 60

      - name: Health check
        run: |
          if [ "${{ needs.setup.outputs.environment }}" = "development" ]; then
            URL="https://api-dev.bible-daily.com"
          elif [ "${{ needs.setup.outputs.environment }}" = "staging" ]; then
            URL="https://api-staging.bible-daily.com"
          fi

          for i in {1..10}; do
            if curl -f $URL/health; then
              echo "✅ Health check passed"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 30s..."
            sleep 30
          done
          echo "❌ Health check failed"
          exit 1

  # Kubernetes 배포 (프로덕션)
  deploy-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: |
      always() && 
      (needs.setup.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch') &&
      (needs.build.result == 'success' || github.event.inputs.deploy_only == 'true') &&
      github.event_name != 'pull_request' &&
      needs.setup.outputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Update deployment image
        run: |
          kubectl set image deployment/bible-daily-backend-prod \
            backend=${{ needs.build.outputs.image }} \
            -n production

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/bible-daily-backend-prod -n production --timeout=600s

      - name: Health check
        run: |
          kubectl get pods -l app=bible-daily-backend -n production

          # 서비스 헬스 체크
          for i in {1..10}; do
            if curl -f https://api.bible-daily.com/health; then
              echo "✅ Production health check passed"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 30s..."
            sleep 30
          done
          echo "❌ Production health check failed"
          exit 1

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Rolling back deployment..."
          kubectl rollout undo deployment/bible-daily-backend-prod -n production
          kubectl rollout status deployment/bible-daily-backend-prod -n production --timeout=300s

  # 배포 후 테스트
  post-deploy-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [setup, deploy-railway, deploy-kubernetes]
    if: |
      always() && 
      (needs.deploy-railway.result == 'success' || needs.deploy-kubernetes.result == 'success') &&
      github.event.inputs.skip_tests != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run API tests
        run: pnpm --filter backend test:api
        env:
          API_BASE_URL: ${{ needs.setup.outputs.environment == 'production' && 'https://api.bible-daily.com' || needs.setup.outputs.environment == 'staging' && 'https://api-staging.bible-daily.com' || 'https://api-dev.bible-daily.com' }}
          CI: true

      - name: Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: backend/test-results/

  # 알림
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs:
      [
        setup,
        test,
        security-scan,
        build,
        deploy-railway,
        deploy-kubernetes,
        post-deploy-tests,
      ]
    if: always() && (needs.setup.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Determine status
        id: status
        run: |
          if [ "${{ needs.deploy-railway.result }}" = "success" ] || [ "${{ needs.deploy-kubernetes.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
          elif [ "${{ needs.deploy-railway.result }}" = "failure" ] || [ "${{ needs.deploy-kubernetes.result }}" = "failure" ] || [ "${{ needs.build.result }}" = "failure" ] || [ "${{ needs.test.result }}" = "failure" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
          else
            echo "status=cancelled" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
            echo "emoji=⚠️" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ steps.status.outputs.emoji }} Backend 배포 ${{ steps.status.outputs.status }}",
              "attachments": [
                {
                  "color": "${{ steps.status.outputs.color }}",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "${{ needs.setup.outputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Image",
                      "value": "${{ needs.build.outputs.image }}",
                      "short": false
                    },
                    {
                      "title": "Commit",
                      "value": "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                      "short": true
                    },
                    {
                      "title": "Actor",
                      "value": "${{ github.actor }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
