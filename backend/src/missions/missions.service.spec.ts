import { Test, TestingModule } from '@nestjs/testing';
import { getRepositoryToken } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { ConflictException } from '@nestjs/common';
import { MissionsService } from './missions.service';
import { Mission } from '../entities/mission.entity';
import { MissionScripture } from '../entities/mission-scripture.entity';
import { UserMission } from '../entities/user-mission.entity';
import { User } from '../entities/user.entity';
import { NotificationsService } from '../notifications/notifications.service';
import { CreateMissionDto } from './dto/create-mission.dto';

describe('MissionsService', () => {
  let service: MissionsService;
  let missionsRepository: Repository<Mission>;
  let missionScripturesRepository: Repository<MissionScripture>;
  let userMissionsRepository: Repository<UserMission>;
  let usersRepository: Repository<User>;
  let notificationsService: NotificationsService;

  const mockMissionsRepository = {
    createQueryBuilder: jest.fn(),
    create: jest.fn(),
    save: jest.fn(),
    find: jest.fn(),
    findOne: jest.fn(),
  };

  const mockMissionScripturesRepository = {
    create: jest.fn(),
    save: jest.fn(),
  };

  const mockUserMissionsRepository = {
    count: jest.fn(),
  };

  const mockUsersRepository = {
    find: jest.fn(),
  };

  const mockNotificationsService = {
    sendNotificationToUsers: jest.fn(),
  };

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        MissionsService,
        {
          provide: getRepositoryToken(Mission),
          useValue: mockMissionsRepository,
        },
        {
          provide: getRepositoryToken(MissionScripture),
          useValue: mockMissionScripturesRepository,
        },
        {
          provide: getRepositoryToken(UserMission),
          useValue: mockUserMissionsRepository,
        },
        {
          provide: getRepositoryToken(User),
          useValue: mockUsersRepository,
        },
        {
          provide: NotificationsService,
          useValue: mockNotificationsService,
        },
      ],
    }).compile();

    service = module.get<MissionsService>(MissionsService);
    missionsRepository = module.get<Repository<Mission>>(
      getRepositoryToken(Mission),
    );
    missionScripturesRepository = module.get<Repository<MissionScripture>>(
      getRepositoryToken(MissionScripture),
    );
    userMissionsRepository = module.get<Repository<UserMission>>(
      getRepositoryToken(UserMission),
    );
    usersRepository = module.get<Repository<User>>(getRepositoryToken(User));
    notificationsService =
      module.get<NotificationsService>(NotificationsService);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('createMission', () => {
    const createMissionDto: CreateMissionDto = {
      date: '2024-01-01',
      title: 'Ïã†ÎÖÑ ÏÑ±Í≤Ω ÏùΩÍ∏∞',
      description: 'ÏÉàÌï¥ Ï≤´ ÏÑ±Í≤Ω ÏùΩÍ∏∞',
      scriptures: [
        {
          book: 'Ï∞ΩÏÑ∏Í∏∞',
          chapter: 1,
          startVerse: 1,
          endVerse: 10,
          order: 1,
        },
      ],
    };

    const mockMission = {
      id: 1,
      date: '2024-01-01',
      title: 'Ïã†ÎÖÑ ÏÑ±Í≤Ω ÏùΩÍ∏∞',
      description: 'ÏÉàÌï¥ Ï≤´ ÏÑ±Í≤Ω ÏùΩÍ∏∞',
    };

    const mockUsers = [{ id: 'user1' }, { id: 'user2' }, { id: 'user3' }];

    it('ÏÉà ÎØ∏ÏÖòÏùÑ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÌïòÍ≥† ÏïåÎ¶ºÏùÑ Ï†ÑÏÜ°Ìï¥Ïïº Ìï®', async () => {
      // Arrange
      const mockQueryBuilder = {
        where: jest.fn().mockReturnThis(),
        getOne: jest.fn().mockResolvedValue(null), // Í∏∞Ï°¥ ÎØ∏ÏÖò ÏóÜÏùå
      };

      mockMissionsRepository.createQueryBuilder.mockReturnValue(
        mockQueryBuilder,
      );
      mockMissionsRepository.create.mockReturnValue(mockMission);
      mockMissionsRepository.save.mockResolvedValue(mockMission);

      const mockMissionScripture = {
        ...createMissionDto.scriptures[0],
        missionId: mockMission.id,
      };
      mockMissionScripturesRepository.create.mockReturnValue(
        mockMissionScripture,
      );
      mockMissionScripturesRepository.save.mockResolvedValue([
        mockMissionScripture,
      ]);

      mockUsersRepository.find.mockResolvedValue(mockUsers);
      mockNotificationsService.sendNotificationToUsers.mockResolvedValue({
        successCount: 3,
        failureCount: 0,
      });

      // Act
      const result = await service.createMission(createMissionDto);

      // Assert
      expect(result).toEqual(mockMission);

      // ÎØ∏ÏÖò ÏÉùÏÑ± ÌôïÏù∏
      expect(mockMissionsRepository.create).toHaveBeenCalledWith({
        date: createMissionDto.date,
        title: createMissionDto.title,
        description: createMissionDto.description,
      });
      expect(mockMissionsRepository.save).toHaveBeenCalledWith(mockMission);

      // ÏÑ±Í≤ΩÍµ¨Ï†à Ï†ÄÏû• ÌôïÏù∏
      expect(mockMissionScripturesRepository.create).toHaveBeenCalledWith({
        ...createMissionDto.scriptures[0],
        missionId: mockMission.id,
      });
      expect(mockMissionScripturesRepository.save).toHaveBeenCalled();

      // ÏïåÎ¶º Ï†ÑÏÜ° ÌôïÏù∏
      expect(mockUsersRepository.find).toHaveBeenCalledWith({
        where: { isActive: true },
        select: ['id'],
      });
      expect(
        mockNotificationsService.sendNotificationToUsers,
      ).toHaveBeenCalledWith(
        ['user1', 'user2', 'user3'],
        expect.objectContaining({
          title: 'üìñ ÏÉàÎ°úÏö¥ ÏÑ±Í≤Ω ÏùΩÍ∏∞ ÎØ∏ÏÖòÏù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!',
          body: expect.stringContaining('Ïã†ÎÖÑ ÏÑ±Í≤Ω ÏùΩÍ∏∞'),
          data: expect.objectContaining({
            type: 'new-mission',
            missionId: '1',
            date: '2024-01-01',
          }),
        }),
      );
    });

    it('Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÎÇ†ÏßúÏùò ÎØ∏ÏÖò ÏÉùÏÑ± Ïãú ConflictExceptionÏùÑ ÎçòÏ†∏Ïïº Ìï®', async () => {
      // Arrange
      const mockQueryBuilder = {
        where: jest.fn().mockReturnThis(),
        getOne: jest.fn().mockResolvedValue(mockMission), // Í∏∞Ï°¥ ÎØ∏ÏÖò Ï°¥Ïû¨
      };

      mockMissionsRepository.createQueryBuilder.mockReturnValue(
        mockQueryBuilder,
      );

      // Act & Assert
      await expect(service.createMission(createMissionDto)).rejects.toThrow(
        ConflictException,
      );
      await expect(service.createMission(createMissionDto)).rejects.toThrow(
        'Mission for this date already exists',
      );

      // ÎØ∏ÏÖò ÏÉùÏÑ±Ïù¥ Ìò∏Ï∂úÎêòÏßÄ ÏïäÏïòÎäîÏßÄ ÌôïÏù∏
      expect(mockMissionsRepository.create).not.toHaveBeenCalled();
      expect(mockMissionsRepository.save).not.toHaveBeenCalled();
      expect(
        mockNotificationsService.sendNotificationToUsers,
      ).not.toHaveBeenCalled();
    });

    it('ÌôúÏÑ± ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏùÑ ÎïåÎèÑ ÎØ∏ÏÖòÏùÄ ÏÉùÏÑ±ÎêòÏñ¥Ïïº Ìï®', async () => {
      // Arrange
      const mockQueryBuilder = {
        where: jest.fn().mockReturnThis(),
        getOne: jest.fn().mockResolvedValue(null),
      };

      mockMissionsRepository.createQueryBuilder.mockReturnValue(
        mockQueryBuilder,
      );
      mockMissionsRepository.create.mockReturnValue(mockMission);
      mockMissionsRepository.save.mockResolvedValue(mockMission);
      mockUsersRepository.find.mockResolvedValue([]); // ÌôúÏÑ± ÏÇ¨Ïö©Ïûê ÏóÜÏùå

      // Act
      const result = await service.createMission(createMissionDto);

      // Assert
      expect(result).toEqual(mockMission);
      expect(
        mockNotificationsService.sendNotificationToUsers,
      ).not.toHaveBeenCalled();
    });

    it('ÏïåÎ¶º Ï†ÑÏÜ° Ïã§Ìå® ÏãúÏóêÎèÑ ÎØ∏ÏÖò ÏÉùÏÑ±ÏùÄ ÏÑ±Í≥µÌï¥Ïïº Ìï®', async () => {
      // Arrange
      const mockQueryBuilder = {
        where: jest.fn().mockReturnThis(),
        getOne: jest.fn().mockResolvedValue(null),
      };

      mockMissionsRepository.createQueryBuilder.mockReturnValue(
        mockQueryBuilder,
      );
      mockMissionsRepository.create.mockReturnValue(mockMission);
      mockMissionsRepository.save.mockResolvedValue(mockMission);
      mockUsersRepository.find.mockResolvedValue(mockUsers);
      mockNotificationsService.sendNotificationToUsers.mockRejectedValue(
        new Error('Notification service error'),
      );

      // Act
      const result = await service.createMission(createMissionDto);

      // Assert
      expect(result).toEqual(mockMission);
      expect(
        mockNotificationsService.sendNotificationToUsers,
      ).toHaveBeenCalled();
    });

    it('ÏÑ±Í≤ΩÍµ¨Ï†à ÏóÜÏù¥ÎèÑ ÎØ∏ÏÖòÏùÑ ÏÉùÏÑ±Ìï† Ïàò ÏûàÏñ¥Ïïº Ìï®', async () => {
      // Arrange
      const createMissionDtoWithoutScriptures = {
        ...createMissionDto,
        scriptures: undefined,
      };

      const mockQueryBuilder = {
        where: jest.fn().mockReturnThis(),
        getOne: jest.fn().mockResolvedValue(null),
      };

      mockMissionsRepository.createQueryBuilder.mockReturnValue(
        mockQueryBuilder,
      );
      mockMissionsRepository.create.mockReturnValue(mockMission);
      mockMissionsRepository.save.mockResolvedValue(mockMission);
      mockUsersRepository.find.mockResolvedValue(mockUsers);
      mockNotificationsService.sendNotificationToUsers.mockResolvedValue({
        successCount: 3,
        failureCount: 0,
      });

      // Act
      const result = await service.createMission(
        createMissionDtoWithoutScriptures,
      );

      // Assert
      expect(result).toEqual(mockMission);
      expect(mockMissionScripturesRepository.create).not.toHaveBeenCalled();
      expect(mockMissionScripturesRepository.save).not.toHaveBeenCalled();

      // ÏïåÎ¶ºÏóêÏÑú ÏÑ±Í≤ΩÍµ¨Ï†à Ï†ïÎ≥¥Í∞Ä ÏóÜÏñ¥ÎèÑ Ï†ÑÏÜ°ÎêòÏñ¥Ïïº Ìï®
      expect(
        mockNotificationsService.sendNotificationToUsers,
      ).toHaveBeenCalledWith(
        ['user1', 'user2', 'user3'],
        expect.objectContaining({
          title: 'üìñ ÏÉàÎ°úÏö¥ ÏÑ±Í≤Ω ÏùΩÍ∏∞ ÎØ∏ÏÖòÏù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!',
          body: 'Ïã†ÎÖÑ ÏÑ±Í≤Ω ÏùΩÍ∏∞',
        }),
      );
    });
  });
});
