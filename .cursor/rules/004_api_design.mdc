---
description: API 설계 패턴 및 네이밍 컨벤션 규칙
globs:
  - "backend/src/**/*.controller.ts"
  - "backend/src/**/*.service.ts"
  - "backend/src/**/*.dto.ts"
alwaysApply: true
---

# API 설계 및 네이밍 컨벤션

## RESTful API 설계 원칙

### 1. 기본 URL 구조

```
/api/v1/{resource}
```

### 2. HTTP 메서드 사용 규칙

- **GET**: 데이터 조회
- **POST**: 새 리소스 생성
- **PUT**: 전체 리소스 업데이트
- **PATCH**: 부분 리소스 업데이트
- **DELETE**: 리소스 삭제

### 3. 상태 코드 가이드라인

- **200 OK**: 성공적인 GET, PUT, PATCH
- **201 Created**: 성공적인 POST
- **204 No Content**: 성공적인 DELETE
- **400 Bad Request**: 잘못된 요청
- **401 Unauthorized**: 인증 실패
- **403 Forbidden**: 권한 없음
- **404 Not Found**: 리소스 없음
- **500 Internal Server Error**: 서버 오류

## API 엔드포인트 설계

### 1. 인증 관련 API

```typescript
// 구글 로그인
POST / api / v1 / auth / google;
POST / api / v1 / auth / refresh;
POST / api / v1 / auth / logout;

// 사용자 정보
GET / api / v1 / auth / me;
PATCH / api / v1 / auth / profile;
```

### 2. 게시물 관련 API

```typescript
// 게시물 CRUD
GET /api/v1/posts                    // 게시물 목록 (페이징, 검색)
GET /api/v1/posts/:id               // 게시물 상세
POST /api/v1/posts                  // 게시물 생성
PUT /api/v1/posts/:id              // 게시물 수정
DELETE /api/v1/posts/:id           // 게시물 삭제

// 좋아요 기능
POST /api/v1/posts/:id/like        // 좋아요 추가
DELETE /api/v1/posts/:id/like      // 좋아요 취소
GET /api/v1/posts/:id/likes        // 좋아요 목록

// 내 게시물
GET /api/v1/posts/my               // 내가 작성한 게시물
```

### 3. 미션 관련 API

```typescript
// 미션 조회
GET /api/v1/missions               // 미션 목록
GET /api/v1/missions/today         // 오늘의 미션
GET /api/v1/missions/:id           // 미션 상세
GET /api/v1/missions/calendar      // 달력 형태 미션 조회

// 미션 완료 관리
POST /api/v1/missions/:id/complete // 미션 완료 체크
DELETE /api/v1/missions/:id/complete // 미션 완료 취소
GET /api/v1/missions/my-progress   // 내 진행률

// 관리자 전용
POST /api/v1/admin/missions        // 미션 생성
PUT /api/v1/admin/missions/:id     // 미션 수정
DELETE /api/v1/admin/missions/:id  // 미션 삭제
```

### 4. 셀 관리 API

```typescript
// 셀 정보
GET /api/v1/cells/my               // 내 셀 정보
GET /api/v1/cells/:id/members      // 셀 구성원 목록
GET /api/v1/cells/:id/stats        // 셀 통계

// 셀 리더 전용
POST /api/v1/cells/:id/messages    // 독려 메시지 전송
GET /api/v1/cells/:id/progress     // 구성원 진행률

// 관리자 전용
GET /api/v1/admin/cells            // 전체 셀 목록
POST /api/v1/admin/cells           // 셀 생성
PUT /api/v1/admin/cells/:id        // 셀 수정
POST /api/v1/admin/cells/:id/members // 구성원 추가
DELETE /api/v1/admin/cells/:id/members/:userId // 구성원 제거
```

### 5. 사용자 관리 API

```typescript
// 사용자 정보
GET /api/v1/users/profile          // 내 프로필
PATCH /api/v1/users/profile        // 프로필 수정

// 관리자 전용
GET /api/v1/admin/users            // 사용자 목록
PATCH /api/v1/admin/users/:id/role // 사용자 역할 변경
```

## DTO (Data Transfer Object) 설계

### 1. 네이밍 컨벤션

```typescript
// 생성용 DTO
CreatePostDto;
CreateMissionDto;

// 수정용 DTO
UpdatePostDto;
UpdateMissionDto;

// 응답용 DTO
PostResponseDto;
MissionResponseDto;

// 쿼리용 DTO
GetPostsQueryDto;
GetMissionsQueryDto;
```

### 2. DTO 예시

#### 게시물 관련 DTO

```typescript
// 게시물 생성 DTO
export class CreatePostDto {
  @IsString()
  @IsNotEmpty()
  @MaxLength(100)
  title: string;

  @IsString()
  @IsNotEmpty()
  @MaxLength(1000)
  content: string;

  @IsString()
  @IsOptional()
  @MaxLength(200)
  bibleVerse?: string;
}

// 게시물 수정 DTO
export class UpdatePostDto extends PartialType(CreatePostDto) {}

// 게시물 목록 쿼리 DTO
export class GetPostsQueryDto {
  @IsOptional()
  @IsInt()
  @Min(1)
  @Type(() => Number)
  page?: number = 1;

  @IsOptional()
  @IsInt()
  @Min(1)
  @Max(50)
  @Type(() => Number)
  limit?: number = 20;

  @IsOptional()
  @IsString()
  search?: string;

  @IsOptional()
  @IsEnum(["latest", "oldest", "popular"])
  sort?: "latest" | "oldest" | "popular" = "latest";
}

// 게시물 응답 DTO
export class PostResponseDto {
  id: number;
  title: string;
  content: string;
  bibleVerse?: string;
  likeCount: number;
  isLiked: boolean;
  author: {
    id: number;
    name: string;
    profileImage?: string;
  };
  createdAt: Date;
  updatedAt: Date;
}
```

#### 미션 관련 DTO

```typescript
// 미션 생성 DTO
export class CreateMissionDto {
  @IsDateString()
  date: string;

  @IsString()
  @IsNotEmpty()
  startBook: string;

  @IsInt()
  @Min(1)
  startChapter: number;

  @IsOptional()
  @IsInt()
  @Min(1)
  startVerse?: number;

  @IsOptional()
  @IsString()
  endBook?: string;

  @IsOptional()
  @IsInt()
  @Min(1)
  endChapter?: number;

  @IsOptional()
  @IsInt()
  @Min(1)
  endVerse?: number;

  @IsOptional()
  @IsString()
  @MaxLength(100)
  title?: string;

  @IsOptional()
  @IsString()
  @MaxLength(500)
  description?: string;
}

// 미션 응답 DTO
export class MissionResponseDto {
  id: number;
  date: Date;
  startBook: string;
  startChapter: number;
  startVerse?: number;
  endBook?: string;
  endChapter?: number;
  endVerse?: number;
  title?: string;
  description?: string;
  completionCount: number;
  isCompleted: boolean;
  createdAt: Date;
}
```

## 컨트롤러 설계 패턴

### 1. 기본 구조

```typescript
@Controller("api/v1/posts")
@UseGuards(JwtAuthGuard)
export class PostsController {
  constructor(private readonly postsService: PostsService) {}

  @Get()
  async findAll(@Query() query: GetPostsQueryDto, @User() user: UserEntity) {
    return this.postsService.findAll(query, user.id);
  }

  @Get(":id")
  async findOne(
    @Param("id", ParseIntPipe) id: number,
    @User() user: UserEntity
  ) {
    return this.postsService.findOne(id, user.id);
  }

  @Post()
  async create(@Body() createPostDto: CreatePostDto, @User() user: UserEntity) {
    return this.postsService.create(createPostDto, user.id);
  }

  @Put(":id")
  async update(
    @Param("id", ParseIntPipe) id: number,
    @Body() updatePostDto: UpdatePostDto,
    @User() user: UserEntity
  ) {
    return this.postsService.update(id, updatePostDto, user.id);
  }

  @Delete(":id")
  @HttpCode(HttpStatus.NO_CONTENT)
  async remove(
    @Param("id", ParseIntPipe) id: number,
    @User() user: UserEntity
  ) {
    return this.postsService.remove(id, user.id);
  }
}
```

### 2. 권한 관리

```typescript
// 공개 엔드포인트
@Public()
@Get('public')
async getPublicPosts() {
  return this.postsService.getPublicPosts();
}

// 교사 권한 필요
@UseGuards(TeacherGuard)
@Get('teacher-only')
async getTeacherPosts() {
  return this.postsService.getTeacherPosts();
}

// 관리자 권한 필요
@UseGuards(AdminGuard)
@Delete('admin/:id')
async adminDelete(@Param('id', ParseIntPipe) id: number) {
  return this.postsService.adminDelete(id);
}
```

## 서비스 레이어 설계

### 1. 기본 패턴

```typescript
@Injectable()
export class PostsService {
  constructor(
    @InjectRepository(Post)
    private readonly postRepository: Repository<Post>,
    @InjectRepository(Like)
    private readonly likeRepository: Repository<Like>
  ) {}

  async findAll(
    query: GetPostsQueryDto,
    userId: number
  ): Promise<PaginatedResult<PostResponseDto>> {
    const { page, limit, search, sort } = query;
    const skip = (page - 1) * limit;

    const queryBuilder = this.postRepository
      .createQueryBuilder("post")
      .leftJoinAndSelect("post.author", "author")
      .leftJoin("post.likes", "like", "like.userId = :userId", { userId })
      .addSelect(
        "CASE WHEN like.id IS NOT NULL THEN true ELSE false END",
        "isLiked"
      )
      .where("post.isDeleted = false");

    if (search) {
      queryBuilder.andWhere(
        "(post.title ILIKE :search OR post.content ILIKE :search)",
        { search: `%${search}%` }
      );
    }

    // 정렬 로직
    switch (sort) {
      case "latest":
        queryBuilder.orderBy("post.createdAt", "DESC");
        break;
      case "oldest":
        queryBuilder.orderBy("post.createdAt", "ASC");
        break;
      case "popular":
        queryBuilder
          .addSelect("COUNT(likes.id)", "likeCount")
          .leftJoin("post.likes", "likes")
          .groupBy("post.id, author.id, like.id")
          .orderBy("likeCount", "DESC");
        break;
    }

    const [posts, total] = await queryBuilder
      .skip(skip)
      .take(limit)
      .getManyAndCount();

    return {
      data: posts.map((post) => this.toResponseDto(post)),
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit),
    };
  }

  private toResponseDto(post: Post): PostResponseDto {
    return {
      id: post.id,
      title: post.title,
      content: post.content,
      bibleVerse: post.bibleVerse,
      likeCount: post.likeCount,
      isLiked: post.isLiked,
      author: {
        id: post.author.id,
        name: post.author.name,
        profileImage: post.author.profileImage,
      },
      createdAt: post.createdAt,
      updatedAt: post.updatedAt,
    };
  }
}
```

## 에러 처리

### 1. 커스텀 예외

```typescript
export class PostNotFoundException extends NotFoundException {
  constructor(id: number) {
    super(`Post with ID ${id} not found`);
  }
}

export class UnauthorizedPostAccessException extends ForbiddenException {
  constructor() {
    super("You are not authorized to access this post");
  }
}
```

### 2. 글로벌 예외 필터

```typescript
@Catch()
export class GlobalExceptionFilter implements ExceptionFilter {
  catch(exception: unknown, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse<Response>();
    const request = ctx.getRequest<Request>();

    let status = HttpStatus.INTERNAL_SERVER_ERROR;
    let message = "Internal server error";

    if (exception instanceof HttpException) {
      status = exception.getStatus();
      message = exception.message;
    }

    response.status(status).json({
      statusCode: status,
      timestamp: new Date().toISOString(),
      path: request.url,
      message,
    });
  }
}
```

## API 문서화

### 1. Swagger 데코레이터 사용

```typescript
@ApiTags("Posts")
@Controller("api/v1/posts")
export class PostsController {
  @ApiOperation({ summary: "게시물 목록 조회" })
  @ApiResponse({ status: 200, description: "성공", type: [PostResponseDto] })
  @ApiQuery({ name: "page", required: false, type: Number })
  @ApiQuery({ name: "limit", required: false, type: Number })
  @Get()
  async findAll(@Query() query: GetPostsQueryDto) {
    // ...
  }

  @ApiOperation({ summary: "게시물 생성" })
  @ApiResponse({ status: 201, description: "생성 성공", type: PostResponseDto })
  @ApiResponse({ status: 400, description: "잘못된 요청" })
  @Post()
  async create(@Body() createPostDto: CreatePostDto) {
    // ...
  }
}
```
