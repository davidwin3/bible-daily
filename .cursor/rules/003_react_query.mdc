---
description:
globs:
alwaysApply: true
---

# React Query 사용 패턴

이 프로젝트는 서버 상태 관리를 위해 [@tanstack/react-query](mdc:https:/tanstack.com/query)를 사용합니다.

## 기본 설정

React Query는 `client/index.js`에서 다음과 같이 설정됩니다:

```javascript
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: false,
      refetchOnWindowFocus: false,
      staleTime: 300000, // 5분
    },
  },
});

ReactDOM.hydrate(
  <QueryClientProvider client={queryClient}>
    <App />
    {process.env.NODE_ENV === "development" && <ReactQueryDevtools />}
  </QueryClientProvider>,
  document.getElementById("app")
);
```

## 쿼리 키 관리

쿼리 키는 각 페이지 또는 모듈의 `queries.ts` 파일에 정의됩니다.
파라미터가 있는 경우에는, object 형식으로 작성해야 한다. e.g. `{ id, filters }`
쿼리 키는 다음과 같은 형식을 따릅니다:

```typescript
export const userKeys = {
  all: ["users"] as const,
  lists: () => [...userKeys.all, "list"] as const,
  list: (filters: string) => [...userKeys.lists(), { filters }] as const,
  details: () => [...userKeys.all, "detail"] as const,
  detail: (id: number) => [...userKeys.details(), { id }] as const,
};
```

이 구조를 통해 쿼리 무효화(invalidation)를 쉽게 할 수 있습니다:

```typescript
// users와 관련된 모든 쿼리 무효화
queryClient.invalidateQueries({ queryKey: userKeys.all });

// 특정 사용자 쿼리 무효화
queryClient.invalidateQueries({ queryKey: userKeys.detail(123) });
```

## 커스텀 훅 패턴

데이터 페칭을 위한 커스텀 훅은 다음과 같은 패턴을 따릅니다:

```typescript
// hooks/useGetExample.ts
import { useQuery } from "@tanstack/react-query";
import { getExample } from "../api";
import { exampleKeys } from "../queries";

export function useGetExample(id: string) {
  return useQuery({
    queryKey: exampleKeys.detail(id),
    queryFn: () => getExample(id),
    enabled: !!id,
  });
}
```

## 변이(Mutation) 패턴

데이터 변경을 위한 변이는 다음과 같은 패턴을 따릅니다:

```typescript
// hooks/useUpdateExample.ts
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { updateExample } from "../api";
import { exampleKeys } from "../queries";

export function useUpdateExample() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: updateExample,
    onSuccess: (data, variables) => {
      // 성공 시 해당 쿼리 무효화
      queryClient.invalidateQueries({
        queryKey: exampleKeys.detail(variables.id),
      });
      // 또는 새 데이터로 캐시 업데이트
      queryClient.setQueryData(exampleKeys.detail(variables.id), data);
    },
  });
}
```

## 실제 사용 예시

### 조회

```typescript
import { useGetExample } from "hooks/useGetExample";

function ExampleComponent({ id }) {
  const { data, isLoading, isError, error } = useGetExample(id);

  if (isLoading) {
    return <div>로딩 중...</div>;
  }

  if (isError) {
    return <div>에러: {error.message}</div>;
  }

  return <div>{data.name}</div>;
}
```

### 변이

```typescript
import { useUpdateExample } from "hooks/useUpdateExample";

function UpdateExampleForm({ id }) {
  const [name, setName] = useState("");
  const updateMutation = useUpdateExample();

  const handleSubmit = (e) => {
    e.preventDefault();
    updateMutation.mutate({ id, name });
  };

  return (
    <form onSubmit={handleSubmit}>
      <input value={name} onChange={(e) => setName(e.target.value)} />
      <button type="submit" disabled={updateMutation.isLoading}>
        {updateMutation.isLoading ? "저장 중..." : "저장"}
      </button>
      {updateMutation.isError && (
        <div>에러: {updateMutation.error.message}</div>
      )}
    </form>
  );
}
```

## 무한 스크롤

무한 스크롤은 `useInfiniteQuery`를 사용하여 구현합니다:

```typescript
// hooks/useGetInfiniteExamples.ts
import { useInfiniteQuery } from "@tanstack/react-query";
import { getExamples } from "../api";
import { exampleKeys } from "../queries";

export function useGetInfiniteExamples() {
  return useInfiniteQuery({
    queryKey: exampleKeys.lists(),
    queryFn: ({ pageParam = 1 }) => getExamples({ page: pageParam }),
    getNextPageParam: (lastPage) =>
      lastPage.hasNextPage ? lastPage.page + 1 : undefined,
  });
}
```

컴포넌트에서 사용:

```typescript
import { useGetInfiniteExamples } from "hooks/useGetInfiniteExamples";

function InfiniteExampleList() {
  const {
    data,
    isLoading,
    isError,
    error,
    fetchNextPage,
    hasNextPage,
    isFetchingNextPage,
  } = useGetInfiniteExamples();

  if (isLoading) {
    return <div>로딩 중...</div>;
  }

  if (isError) {
    return <div>에러: {error.message}</div>;
  }

  return (
    <div>
      {data.pages.map((page, i) => (
        <div key={i}>
          {page.items.map((item) => (
            <div key={item.id}>{item.name}</div>
          ))}
        </div>
      ))}

      <button
        onClick={() => fetchNextPage()}
        disabled={!hasNextPage || isFetchingNextPage}
      >
        {isFetchingNextPage
          ? "더 불러오는 중..."
          : hasNextPage
          ? "더 보기"
          : "더 이상 없음"}
      </button>
    </div>
  );
}
```
