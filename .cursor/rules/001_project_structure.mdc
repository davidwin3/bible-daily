---
description: Bible Daily 프로젝트의 전체 구조와 기술 스택 정의
globs:
alwaysApply: true
---

# Bible Daily 프로젝트 구조

## 프로젝트 개요

중고등학생을 위한 성경말씀 소감 공유 플랫폼으로, PWA 기반의 모바일 우선 설계

## 기술 스택

### Frontend

- **React 18**: 사용자 인터페이스 구축
- **Vite**: 빠른 개발 환경 및 빌드 도구
- **TypeScript**: 타입 안전성 보장
- **TailwindCSS**: 유틸리티 기반 CSS 프레임워크
- **Shadcn/ui**: 컴포넌트 라이브러리
- **React Query (@tanstack/react-query)**: 서버 상태 관리 및 데이터 페칭
- **PWA (Progressive Web App)**: 네이티브 앱과 같은 사용자 경험 제공
- **Node.js 버전**: 20.x
- **패키지 매니저**: pnpm

### Backend

- **NestJS**: Node.js 기반 서버 프레임워크
- **TypeScript**: 타입 안전성 보장
- **TypeORM**: TypeScript 기반 ORM
- **MySQL**: 관계형 데이터베이스
- **JWT**: 토큰 기반 인증
- **Google OAuth 2.0**: 구글 계정 연동 로그인

## 프로젝트 구조

### Frontend 디렉토리 구조

```
frontend/
├── src/
│   ├── components/          # 재사용 가능한 컴포넌트
│   │   ├── ui/             # shadcn/ui 기본 컴포넌트
│   │   ├── layout/         # 레이아웃 컴포넌트
│   │   ├── forms/          # 폼 관련 컴포넌트
│   │   └── common/         # 공통 컴포넌트
│   ├── pages/              # 페이지 컴포넌트
│   │   ├── HomePage.tsx
│   │   ├── PostsPage.tsx
│   │   ├── MissionsPage.tsx
│   │   ├── CellPage.tsx
│   │   └── AdminPage.tsx
│   ├── hooks/              # 커스텀 훅
│   │   ├── api/           # API 관련 훅
│   │   ├── auth/          # 인증 관련 훅
│   │   └── common/        # 공통 훅
│   ├── lib/               # 유틸리티 및 설정
│   │   ├── api.ts         # API 클라이언트 설정
│   │   ├── auth.ts        # 인증 관련 유틸
│   │   ├── utils.ts       # 공통 유틸리티
│   │   └── constants.ts   # 상수 정의
│   ├── queries/           # React Query 키 정의
│   │   ├── posts.ts
│   │   ├── missions.ts
│   │   ├── users.ts
│   │   └── cells.ts
│   ├── contexts/          # React Context
│   │   ├── AuthContext.tsx
│   │   └── NotificationContext.tsx
│   └── types/             # TypeScript 타입 정의
│       ├── api.ts
│       ├── auth.ts
│       └── entities.ts
```

### Backend 디렉토리 구조

```
backend/
├── src/
│   ├── entities/          # TypeORM 엔티티
│   │   ├── user.entity.ts
│   │   ├── post.entity.ts
│   │   ├── mission.entity.ts
│   │   ├── cell.entity.ts
│   │   └── like.entity.ts
│   ├── auth/              # 인증 모듈
│   │   ├── auth.controller.ts
│   │   ├── auth.service.ts
│   │   ├── auth.module.ts
│   │   ├── jwt.strategy.ts
│   │   └── guards/
│   ├── users/             # 사용자 모듈
│   ├── posts/             # 게시물 모듈
│   ├── missions/          # 미션 모듈
│   ├── cells/             # 셀 모듈
│   ├── admin/             # 관리자 모듈
│   └── common/            # 공통 모듈
│       ├── decorators/
│       ├── filters/
│       └── pipes/
```

## 주요 기능 모듈

### 1. 인증 시스템

- Google OAuth 2.0 연동
- JWT 토큰 기반 인증
- 역할 기반 접근 제어 (학생, 교사, 관리자)

### 2. 게시물 시스템

- CRUD 기능
- 좋아요 기능
- 페이징 및 검색

### 3. 미션 시스템

- 일일 성경 읽기 미션
- 진행률 추적
- 달력 형태 히스토리

### 4. 셀 관리 시스템

- 소그룹 구성원 관리
- 담당자 권한 관리
- 독려 메시지 기능

### 5. PWA 기능

- Service Worker
- 푸시 알림
- 오프라인 지원
- 홈 스크린 추가

## 개발 가이드라인

### 네이밍 컨벤션

- **컴포넌트**: PascalCase (예: `PostCard.tsx`)
- **훅**: camelCase with use prefix (예: `useGetPosts.ts`)
- **파일명**: kebab-case 또는 PascalCase
- **API 엔드포인트**: RESTful 패턴 준수

### 코드 구조

- 모바일 우선 반응형 디자인
- 접근성 고려 (WCAG 2.1 AA 준수)
- 타입 안전성 보장
- 에러 바운더리 적용
