---
description: UI/UX 컴포넌트 설계 및 모바일 우선 디자인 규칙
globs:
  - "frontend/src/components/**"
  - "frontend/src/pages/**"
  - "frontend/src/**/*.tsx"
alwaysApply: true
---

# UI/UX 컴포넌트 설계 규칙

## 디자인 시스템

### 1. 모바일 우선 설계 (Mobile First)

- **기본 뷰포트**: 375px (iPhone SE 기준)
- **브레이크포인트**:
  - `sm`: 640px (모바일 가로)
  - `md`: 768px (태블릿)
  - `lg`: 1024px (데스크톱)
  - `xl`: 1280px (대형 데스크톱)

### 2. 색상 시스템

```css
/* Primary Colors - 성경적 느낌의 따뜻한 색상 */
--primary-50: #fef7ee;
--primary-100: #fdedd3;
--primary-500: #f97316; /* 메인 컬러 */
--primary-600: #ea580c;
--primary-900: #9a3412;

/* Semantic Colors */
--success: #10b981;
--warning: #f59e0b;
--error: #ef4444;
--info: #3b82f6;

/* Neutral Colors */
--gray-50: #f9fafb;
--gray-100: #f3f4f6;
--gray-500: #6b7280;
--gray-900: #111827;
```

### 3. 타이포그래피

```css
/* 한글 폰트 스택 */
font-family: "Pretendard", -apple-system, BlinkMacSystemFont, system-ui, sans-serif;

/* 크기 시스템 */
--text-xs: 0.75rem; /* 12px */
--text-sm: 0.875rem; /* 14px */
--text-base: 1rem; /* 16px */
--text-lg: 1.125rem; /* 18px */
--text-xl: 1.25rem; /* 20px */
--text-2xl: 1.5rem; /* 24px */
--text-3xl: 1.875rem; /* 30px */
```

### 4. 간격 시스템

```css
/* Tailwind 기본 스페이싱 사용 */
--spacing-1: 0.25rem; /* 4px */
--spacing-2: 0.5rem; /* 8px */
--spacing-4: 1rem; /* 16px */
--spacing-6: 1.5rem; /* 24px */
--spacing-8: 2rem; /* 32px */
```

## 컴포넌트 구조

### 1. 컴포넌트 분류

```
components/
├── ui/              # shadcn/ui 기본 컴포넌트
│   ├── button.tsx
│   ├── input.tsx
│   ├── card.tsx
│   └── ...
├── layout/          # 레이아웃 컴포넌트
│   ├── Header.tsx
│   ├── Navigation.tsx
│   ├── Sidebar.tsx
│   └── Layout.tsx
├── forms/           # 폼 관련 컴포넌트
│   ├── PostForm.tsx
│   ├── MissionForm.tsx
│   └── SearchForm.tsx
├── common/          # 공통 컴포넌트
│   ├── LoadingSpinner.tsx
│   ├── ErrorBoundary.tsx
│   ├── EmptyState.tsx
│   └── ConfirmDialog.tsx
└── features/        # 기능별 컴포넌트
    ├── posts/
    ├── missions/
    ├── cells/
    └── auth/
```

### 2. 컴포넌트 네이밍 규칙

- **컴포넌트**: PascalCase (예: `PostCard`, `MissionCalendar`)
- **Props 인터페이스**: `{ComponentName}Props`
- **스타일 클래스**: kebab-case 또는 Tailwind 클래스

### 3. 컴포넌트 템플릿

```typescript
interface PostCardProps {
  post: Post;
  onLike?: (postId: number) => void;
  onEdit?: (postId: number) => void;
  className?: string;
}

export function PostCard({ post, onLike, onEdit, className }: PostCardProps) {
  return (
    <Card className={cn("w-full", className)}>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Avatar className="h-8 w-8">
              <AvatarImage src={post.author.profileImage} />
              <AvatarFallback>{post.author.name[0]}</AvatarFallback>
            </Avatar>
            <div>
              <p className="text-sm font-medium">{post.author.name}</p>
              <p className="text-xs text-muted-foreground">
                {formatDate(post.createdAt)}
              </p>
            </div>
          </div>
          {onEdit && (
            <Button variant="ghost" size="sm" onClick={() => onEdit(post.id)}>
              <Edit className="h-4 w-4" />
            </Button>
          )}
        </div>
      </CardHeader>

      <CardContent>
        <h3 className="font-semibold mb-2">{post.title}</h3>
        <p className="text-sm text-muted-foreground mb-3">{post.content}</p>
        {post.bibleVerse && (
          <div className="bg-primary/10 p-3 rounded-md mb-3">
            <p className="text-sm font-medium text-primary">
              {post.bibleVerse}
            </p>
          </div>
        )}
      </CardContent>

      <CardFooter className="flex justify-between">
        <Button
          variant="ghost"
          size="sm"
          onClick={() => onLike?.(post.id)}
          className="flex items-center space-x-1"
        >
          <Heart
            className={cn(
              "h-4 w-4",
              post.isLiked && "fill-red-500 text-red-500"
            )}
          />
          <span>{post.likeCount}</span>
        </Button>

        <Button variant="ghost" size="sm">
          <Share className="h-4 w-4" />
        </Button>
      </CardFooter>
    </Card>
  );
}
```

## 페이지 컴포넌트 구조

### 1. 페이지 템플릿

```typescript
interface HomePageProps {}

export function HomePage({}: HomePageProps) {
  const { data: todayMission, isLoading: missionLoading } =
    useGetTodayMission();
  const { data: recentPosts, isLoading: postsLoading } = useGetRecentPosts();

  if (missionLoading || postsLoading) {
    return <LoadingSpinner />;
  }

  return (
    <Layout>
      <div className="container mx-auto px-4 py-6 space-y-6">
        {/* 오늘의 미션 섹션 */}
        <section>
          <h2 className="text-xl font-bold mb-4">오늘의 말씀</h2>
          {todayMission ? (
            <MissionCard mission={todayMission} />
          ) : (
            <EmptyState message="오늘의 미션이 없습니다." />
          )}
        </section>

        {/* 최근 소감 섹션 */}
        <section>
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold">최근 소감</h2>
            <Button variant="outline" size="sm" asChild>
              <Link to="/posts">더보기</Link>
            </Button>
          </div>

          <div className="space-y-4">
            {recentPosts?.map((post) => (
              <PostCard key={post.id} post={post} />
            ))}
          </div>
        </section>
      </div>
    </Layout>
  );
}
```

### 2. 레이아웃 컴포넌트

```typescript
interface LayoutProps {
  children: React.ReactNode;
  showNavigation?: boolean;
}

export function Layout({ children, showNavigation = true }: LayoutProps) {
  return (
    <div className="min-h-screen bg-background">
      <Header />

      <main className="pb-16 md:pb-0">{children}</main>

      {showNavigation && <BottomNavigation />}
    </div>
  );
}

export function Header() {
  const { user, logout } = useAuth();

  return (
    <header className="sticky top-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b">
      <div className="container mx-auto px-4 h-14 flex items-center justify-between">
        <Link to="/" className="flex items-center space-x-2">
          <BookOpen className="h-6 w-6 text-primary" />
          <span className="font-bold text-lg">Bible Daily</span>
        </Link>

        <div className="flex items-center space-x-2">
          <Button variant="ghost" size="sm" asChild>
            <Link to="/notifications">
              <Bell className="h-5 w-5" />
            </Link>
          </Button>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="sm">
                <Avatar className="h-6 w-6">
                  <AvatarImage src={user?.profileImage} />
                  <AvatarFallback>{user?.name[0]}</AvatarFallback>
                </Avatar>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem asChild>
                <Link to="/profile">프로필</Link>
              </DropdownMenuItem>
              <DropdownMenuItem asChild>
                <Link to="/settings">설정</Link>
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={logout}>로그아웃</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </header>
  );
}
```

### 3. 하단 네비게이션

```typescript
export function BottomNavigation() {
  const location = useLocation();

  const navItems = [
    { path: "/", icon: Home, label: "홈" },
    { path: "/posts", icon: MessageSquare, label: "소감" },
    { path: "/missions", icon: BookOpen, label: "미션" },
    { path: "/cell", icon: Users, label: "셀" },
  ];

  return (
    <nav className="fixed bottom-0 left-0 right-0 bg-background border-t md:hidden">
      <div className="grid grid-cols-4 h-16">
        {navItems.map(({ path, icon: Icon, label }) => (
          <Link
            key={path}
            to={path}
            className={cn(
              "flex flex-col items-center justify-center space-y-1 text-xs",
              location.pathname === path
                ? "text-primary"
                : "text-muted-foreground"
            )}
          >
            <Icon className="h-5 w-5" />
            <span>{label}</span>
          </Link>
        ))}
      </div>
    </nav>
  );
}
```

## 폼 컴포넌트 설계

### 1. React Hook Form + Zod 패턴

```typescript
const postSchema = z.object({
  title: z
    .string()
    .min(1, "제목을 입력해주세요")
    .max(100, "제목은 100자 이내로 입력해주세요"),
  content: z
    .string()
    .min(1, "내용을 입력해주세요")
    .max(1000, "내용은 1000자 이내로 입력해주세요"),
  bibleVerse: z.string().optional(),
});

type PostFormData = z.infer<typeof postSchema>;

interface PostFormProps {
  initialData?: Partial<PostFormData>;
  onSubmit: (data: PostFormData) => void;
  isLoading?: boolean;
}

export function PostForm({ initialData, onSubmit, isLoading }: PostFormProps) {
  const form = useForm<PostFormData>({
    resolver: zodResolver(postSchema),
    defaultValues: initialData,
  });

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>제목</FormLabel>
              <FormControl>
                <Input placeholder="소감 제목을 입력해주세요" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="content"
          render={({ field }) => (
            <FormItem>
              <FormLabel>내용</FormLabel>
              <FormControl>
                <Textarea
                  placeholder="오늘 읽은 말씀에 대한 소감을 나누어주세요"
                  className="min-h-[120px]"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="bibleVerse"
          render={({ field }) => (
            <FormItem>
              <FormLabel>관련 성경구절 (선택)</FormLabel>
              <FormControl>
                <Input placeholder="예: 요한복음 3:16" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <div className="flex gap-2">
          <Button type="submit" disabled={isLoading} className="flex-1">
            {isLoading ? "저장 중..." : "저장"}
          </Button>
          <Button type="button" variant="outline">
            취소
          </Button>
        </div>
      </form>
    </Form>
  );
}
```

## 상태 관리 및 로딩 처리

### 1. 로딩 상태 컴포넌트

```typescript
export function LoadingSpinner({ size = "md" }: { size?: "sm" | "md" | "lg" }) {
  const sizeClasses = {
    sm: "h-4 w-4",
    md: "h-8 w-8",
    lg: "h-12 w-12",
  };

  return (
    <div className="flex items-center justify-center p-4">
      <Loader2 className={cn("animate-spin", sizeClasses[size])} />
    </div>
  );
}

export function LoadingSkeleton() {
  return (
    <Card>
      <CardHeader>
        <div className="flex items-center space-x-2">
          <Skeleton className="h-8 w-8 rounded-full" />
          <div className="space-y-1">
            <Skeleton className="h-4 w-20" />
            <Skeleton className="h-3 w-16" />
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <Skeleton className="h-4 w-full mb-2" />
        <Skeleton className="h-4 w-3/4 mb-2" />
        <Skeleton className="h-16 w-full" />
      </CardContent>
    </Card>
  );
}
```

### 2. 에러 상태 처리

```typescript
interface ErrorStateProps {
  error: Error;
  retry?: () => void;
}

export function ErrorState({ error, retry }: ErrorStateProps) {
  return (
    <div className="flex flex-col items-center justify-center p-8 text-center">
      <AlertCircle className="h-12 w-12 text-destructive mb-4" />
      <h3 className="text-lg font-semibold mb-2">오류가 발생했습니다</h3>
      <p className="text-muted-foreground mb-4">{error.message}</p>
      {retry && (
        <Button onClick={retry} variant="outline">
          다시 시도
        </Button>
      )}
    </div>
  );
}

export function EmptyState({
  message,
  action,
}: {
  message: string;
  action?: React.ReactNode;
}) {
  return (
    <div className="flex flex-col items-center justify-center p-8 text-center">
      <FileX className="h-12 w-12 text-muted-foreground mb-4" />
      <p className="text-muted-foreground mb-4">{message}</p>
      {action}
    </div>
  );
}
```

## 접근성 (Accessibility) 가이드라인

### 1. 키보드 네비게이션

- 모든 인터랙티브 요소는 키보드로 접근 가능
- Tab 순서가 논리적이어야 함
- Focus 상태가 명확하게 표시되어야 함

### 2. 스크린 리더 지원

```typescript
// ARIA 레이블 사용
<Button aria-label="게시물에 좋아요 추가">
  <Heart className="h-4 w-4" />
</Button>

// 상태 정보 제공
<div aria-live="polite" aria-atomic="true">
  {isLoading ? '로딩 중...' : `${posts.length}개의 게시물`}
</div>

// 랜드마크 역할 정의
<main role="main">
  <section aria-labelledby="recent-posts-heading">
    <h2 id="recent-posts-heading">최근 소감</h2>
    {/* 내용 */}
  </section>
</main>
```

### 3. 색상 대비 및 텍스트 크기

- WCAG 2.1 AA 기준 준수 (4.5:1 대비율)
- 최소 텍스트 크기: 16px (1rem)
- 터치 타겟 최소 크기: 44px

## 반응형 디자인 패턴

### 1. 컨테이너 및 그리드

```typescript
// 반응형 컨테이너
<div className="container mx-auto px-4 sm:px-6 lg:px-8">

// 반응형 그리드
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">

// 반응형 플렉스
<div className="flex flex-col md:flex-row gap-4">
```

### 2. 조건부 렌더링

```typescript
// 모바일에서만 표시
<div className="md:hidden">
  <BottomNavigation />
</div>

// 데스크톱에서만 표시
<div className="hidden md:block">
  <Sidebar />
</div>
```
