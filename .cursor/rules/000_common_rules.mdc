---
description: Bible Daily 프로젝트 핵심 개발 가이드라인
globs:
alwaysApply: true
---

# Bible Daily 개발 가이드라인 (핵심 규칙)

## 🎯 기본 원칙

### 명확성과 투명성

- 답이 명확하지 않을 경우, 불가능한 것에 대해서는 명확히 "불가능하다"고 표현
- 답변에 필요한 정보가 부족할 경우 웹 검색을 통한 추가 조사 수행
- 여러 해결방안이 있을 경우, 각각의 장단점을 명확히 비교 분석

### 신중한 변경 관리

- 코드 수정 전 반드시 기존 코드의 맥락과 의도를 파악
- 여러 파일 동시 수정 시 의존성 순서를 반드시 고려
- 변경 사항에 대한 영향도 분석 및 부작용을 사전 검토

### 체계적 접근

- 복잡한 요청 시 TODO 계획을 수립하고 단계별로 진행
- 불확실한 부분은 개발자에게 의도를 명확히 확인 후 진행
- 변경사항 수정 후 자동으로 커밋하지 않음 (개발자 검토 필요)

## 🚫 금지 사항

### 파일 수정 제한

- 개발자의 동의 없이 파일 수정 금지
- webpack.config.js, vite.config.ts, .env, package.json 등 중요 설정 파일은 신중하게 접근
- 설정 변경 시 반드시 개발자의 동의를 얻은 후 진행

### 보안 위험 요소

- XSS 방지를 위한 dangerouslySetInnerHTML 사용 제한
- 민감한 정보는 클라이언트에 절대 노출 금지
- 적절한 입력 데이터 검증 및 새니타이제이션 필수

## 🔧 문제 해결 접근법

### 에러 진단 절차

- 에러 발생 시 관련 파일들의 의존성을 우선 체크
- 타입 에러는 전체 타입 정의 파일 확인 후 해결
- 스타일 이슈는 theme 파일과 전역 스타일을 우선으로 확인

### 테스트 코드 관리

- 리팩토링 시 테스트 코드를 우선 확인
- 테스트 코드가 없다면 추가 작성을 제안
- 기존 기능에 영향을 주는 변경 시 회귀 테스트 수행

## ⚡ 성능 최적화 원칙

### React 최적화

- React.memo, useMemo, useCallback을 적절하게 사용 (불필요한 사용 금지)
- 이미지 최적화 및 지연 로딩 고려
- 컴포넌트 리렌더링 최소화

### React Query 설정

- staleTime, cacheTime 적절한 설정
- 쿼리 키 관리 체계적으로 수행
- 무한 스크롤 및 페이징 최적화

## 🤝 협업 규칙

### 주석 작성 원칙

- 복잡한 로직에는 주석으로 의도를 명확히 설명
- 명확하거나 간단한 함수에 대해서는 주석 생략
- 비즈니스 로직의 배경과 이유를 설명

### 문서화 및 커밋

- README 및 문서 업데이트 필요성을 판단하여 큰 변경사항 시 업데이트 제안
- 커밋 메시지는 다음 가이드를 따름:

  ```
  <type>: <subject>

  - <변경 내역 1>
  - <변경 내역 2>
  ```

## 📝 코드 품질 기준

### 타입 안전성

- TypeScript 엄격 모드 준수
- any 타입 사용 최소화
- 적절한 인터페이스 및 타입 정의

### 보안 코딩

- 입력 데이터 검증 및 새니타이제이션
- SQL Injection 및 XSS 방지
- 권한 기반 접근 제어 구현

### Node.js 버전

- Node.js 버전은 .nvmrc 버전을 따른다.
- 만약에 .nvmrc가 없을 경우에는 v20.19.4를 사용한다.

### 개발 서버 실행

- nvm use 로 node version 싱크 필수
- pnpm dev는 루트 폴더에서 실행

자세한 내용은 `DEVELOPMENT-GUIDELINES.md` 문서를 참조하세요.
